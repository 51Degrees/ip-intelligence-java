/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#include "ip-intelligence-cxx/src/EngineIpi.hpp"

using namespace FiftyoneDegrees::Common;
using namespace FiftyoneDegrees::IpIntelligence;


#include <map>
#include <stdexcept>

SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(std::map< std::string,std::string >::iterator *self){
          std::map< std::string, std::string, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot(std::map< std::string,std::string >::iterator const *self,std::map< std::string,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey(std::map< std::string,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue(std::map< std::string,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(std::map< std::string,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl(std::map< std::string,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(std::map< std::string,std::string > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(std::map< std::string,std::string > *self,std::string const &key,std::string const &value){
#ifdef __cpp_lib_map_try_emplace
        (*self).insert_or_assign(key, value);
#else
        (*self)[key] = value;
#endif
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }

SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doCapacity(std::vector< std::string > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doReserve(std::vector< std::string > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_NullReferenceError:
    exception_code = SWIG_JavaNullPointerException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <utility>

SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(jint count,unsigned char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned char >(static_cast<std::vector< unsigned char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doCapacity(std::vector< uint8_t > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doReserve(std::vector< uint8_t > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doSize(std::vector< uint8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(std::vector< uint8_t > *self,std::vector< unsigned char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doRemove(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_uint8_t_Sg__doGet(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doSet(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doRemoveRange(std::vector< uint8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< std::string > > *new_std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg___SWIG_2(jint count,WeightedValue< std::string > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< WeightedValue< std::string > >(static_cast<std::vector< WeightedValue< std::string > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doCapacity(std::vector< WeightedValue< std::string > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doReserve(std::vector< WeightedValue< std::string > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doSize(std::vector< WeightedValue< std::string > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doAdd__SWIG_0(std::vector< WeightedValue< std::string > > *self,std::vector< WeightedValue< std::string > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doAdd__SWIG_1(std::vector< WeightedValue< std::string > > *self,jint index,std::vector< WeightedValue< std::string > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< std::string > >::value_type std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doRemove(std::vector< WeightedValue< std::string > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          WeightedValue< std::string > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< std::string > >::value_type const &std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doGet(std::vector< WeightedValue< std::string > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< WeightedValue< std::string > >::value_type std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doSet(std::vector< WeightedValue< std::string > > *self,jint index,std::vector< WeightedValue< std::string > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          WeightedValue< std::string > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doRemoveRange(std::vector< WeightedValue< std::string > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< std::vector< uint8_t > > > *new_std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg___SWIG_2(jint count,WeightedValue< std::vector< uint8_t > > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< WeightedValue< std::vector< uint8_t > > >(static_cast<std::vector< WeightedValue< std::vector< uint8_t > > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doCapacity(std::vector< WeightedValue< std::vector< uint8_t > > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doReserve(std::vector< WeightedValue< std::vector< uint8_t > > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doSize(std::vector< WeightedValue< std::vector< uint8_t > > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doAdd__SWIG_0(std::vector< WeightedValue< std::vector< uint8_t > > > *self,std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doAdd__SWIG_1(std::vector< WeightedValue< std::vector< uint8_t > > > *self,jint index,std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< std::vector< unsigned char > > >::value_type std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doRemove(std::vector< WeightedValue< std::vector< uint8_t > > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          WeightedValue< std::vector< uint8_t > > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const &std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doGet(std::vector< WeightedValue< std::vector< uint8_t > > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< WeightedValue< std::vector< unsigned char > > >::value_type std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doSet(std::vector< WeightedValue< std::vector< uint8_t > > > *self,jint index,std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          WeightedValue< std::vector< uint8_t > > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doRemoveRange(std::vector< WeightedValue< std::vector< uint8_t > > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< bool > > *new_std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg___SWIG_2(jint count,WeightedValue< bool > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< WeightedValue< bool > >(static_cast<std::vector< WeightedValue< bool > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doCapacity(std::vector< WeightedValue< bool > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doReserve(std::vector< WeightedValue< bool > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doSize(std::vector< WeightedValue< bool > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doAdd__SWIG_0(std::vector< WeightedValue< bool > > *self,std::vector< WeightedValue< bool > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doAdd__SWIG_1(std::vector< WeightedValue< bool > > *self,jint index,std::vector< WeightedValue< bool > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< bool > >::value_type std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doRemove(std::vector< WeightedValue< bool > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          WeightedValue< bool > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< bool > >::value_type const &std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doGet(std::vector< WeightedValue< bool > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< WeightedValue< bool > >::value_type std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doSet(std::vector< WeightedValue< bool > > *self,jint index,std::vector< WeightedValue< bool > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          WeightedValue< bool > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doRemoveRange(std::vector< WeightedValue< bool > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< int > > *new_std_vector_Sl_WeightedValue_Sl_int_Sg__Sg___SWIG_2(jint count,WeightedValue< int > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< WeightedValue< int > >(static_cast<std::vector< WeightedValue< int > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doCapacity(std::vector< WeightedValue< int > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doReserve(std::vector< WeightedValue< int > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doSize(std::vector< WeightedValue< int > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doAdd__SWIG_0(std::vector< WeightedValue< int > > *self,std::vector< WeightedValue< int > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doAdd__SWIG_1(std::vector< WeightedValue< int > > *self,jint index,std::vector< WeightedValue< int > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< int > >::value_type std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doRemove(std::vector< WeightedValue< int > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          WeightedValue< int > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< int > >::value_type const &std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doGet(std::vector< WeightedValue< int > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< WeightedValue< int > >::value_type std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doSet(std::vector< WeightedValue< int > > *self,jint index,std::vector< WeightedValue< int > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          WeightedValue< int > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doRemoveRange(std::vector< WeightedValue< int > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< double > > *new_std_vector_Sl_WeightedValue_Sl_double_Sg__Sg___SWIG_2(jint count,WeightedValue< double > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< WeightedValue< double > >(static_cast<std::vector< WeightedValue< double > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doCapacity(std::vector< WeightedValue< double > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doReserve(std::vector< WeightedValue< double > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doSize(std::vector< WeightedValue< double > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doAdd__SWIG_0(std::vector< WeightedValue< double > > *self,std::vector< WeightedValue< double > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doAdd__SWIG_1(std::vector< WeightedValue< double > > *self,jint index,std::vector< WeightedValue< double > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< double > >::value_type std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doRemove(std::vector< WeightedValue< double > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          WeightedValue< double > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< WeightedValue< double > >::value_type const &std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doGet(std::vector< WeightedValue< double > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< WeightedValue< double > >::value_type std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doSet(std::vector< WeightedValue< double > > *self,jint index,std::vector< WeightedValue< double > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          WeightedValue< double > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doRemoveRange(std::vector< WeightedValue< double > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

  void Evidence_AddFromBytes(EvidenceBase *evidence, const char key[], size_t keyLength, const char value[], size_t valueLength) {
    (*evidence)[key] = value;
  }

  Value<std::string> Results_GetValueAsString(ResultsBase *results, const char propertyName[], size_t propertyNameLength) {
    return results->getValueAsString(propertyName);
  }
  Value<std::vector<std::string>> Results_GetValues(ResultsBase *results, const char propertyName[], size_t propertyNameLength) {
    return results->getValues(propertyName);
  }
  Value<bool> Results_GetValueAsBool(ResultsBase *results, const char propertyName[], size_t propertyNameLength) {
    return results->getValueAsBool(propertyName);
  }
  Value<int> Results_GetValueAsInteger(ResultsBase *results, const char propertyName[], size_t propertyNameLength) {
    return results->getValueAsInteger(propertyName);
  }
  Value<double> Results_GetValueAsDouble(ResultsBase *results, const char propertyName[], size_t propertyNameLength) {
    return results->getValueAsDouble(propertyName);
  }
  bool Results_ContainsProperty(ResultsBase *results, const char propertyName[], size_t propertyNameLength) {
    return results->containsProperty(propertyName);
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1MapStringStringSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1MapStringStringSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,std::string,std::less< std::string > >::iterator(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot((std::map< std::string,std::string >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1MapStringStringSwig_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find((std::string const &)*arg2);
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  try {
    result = std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl((std::map< std::string,std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MapStringStringSwig_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  argp2 = *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1MapStringStringSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1VectorStringSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1VectorStringSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1VectorStringSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_std_string_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1VectorStringSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1RequiredPropertiesConfigSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequiredPropertiesConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(RequiredPropertiesConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1RequiredPropertiesConfigSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  RequiredPropertiesConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig((std::vector< std::string > const *)arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(RequiredPropertiesConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1RequiredPropertiesConfigSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  RequiredPropertiesConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig((char const *)arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(RequiredPropertiesConfig **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1RequiredPropertiesConfigSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequiredPropertiesConfig *arg1 = (RequiredPropertiesConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequiredPropertiesConfig **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_RequiredPropertiesConfigSwig_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RequiredPropertiesConfig *arg1 = (RequiredPropertiesConfig *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequiredPropertiesConfig **)&jarg1; 
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1StringValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::string > *)new Value< std::string >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_StringValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::string > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_StringValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::string > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_StringValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::string > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1StringValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::string > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1BoolValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< bool > *)new Value< bool >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_BoolValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< bool > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_BoolValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< bool > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_BoolValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< bool > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1BoolValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< bool > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1IntegerValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< int > *)new Value< int >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IntegerValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< int > *arg1 = (Value< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< int > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IntegerValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< int > *arg1 = (Value< int > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< int > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IntegerValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Value< int > *arg1 = (Value< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< int > **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1IntegerValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< int > *arg1 = (Value< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< int > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1VectorStringValuesSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::vector< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::vector< std::string > > *)new Value< std::vector< std::string > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringValuesSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< std::string > > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringValuesSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< std::string > > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_VectorStringValuesSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< std::string > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1VectorStringValuesSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::vector< std::string > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1DoubleValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< double > *)new Value< double >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_DoubleValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< double > *arg1 = (Value< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< double > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_DoubleValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< double > *arg1 = (Value< double > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< double > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_DoubleValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Value< double > *arg1 = (Value< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< double > **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1DoubleValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< double > *arg1 = (Value< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< double > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ResultsBaseSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getAvailableProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getAvailableProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1containsProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)(arg1)->containsProperty((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getPropertyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getPropertyName(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValues((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< std::string > > **)&jresult = new Value< std::vector< std::string > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< std::vector< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValues(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< std::string > > **)&jresult = new Value< std::vector< std::string > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValueAsString((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::string > **)&jresult = new Value< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsString(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::string > **)&jresult = new Value< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValueAsBool((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< bool > **)&jresult = new Value< bool >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsBool(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< bool > **)&jresult = new Value< bool >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValueAsInteger((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< int > **)&jresult = new Value< int >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsInteger(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< int > **)&jresult = new Value< int >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  Value< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValueAsDouble((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< double > **)&jresult = new Value< double >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsBaseSwig_1getValueAsDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  Value< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsDouble(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< double > **)&jresult = new Value< double >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Date_1getYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getYear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Date_1getMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getMonth();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Date_1getDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Date *arg1 = (Date *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Date **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getDay();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1Date(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Date *arg1 = (Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Date **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getDataFilesWherePresent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getDataFilesWherePresent();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getType();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getCategory();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getUrl();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getAvailable();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getDisplayOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getDisplayOrder();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getIsMandatory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsMandatory();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getIsList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsList();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getIsObsolete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsObsolete();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getShow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getShow();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getShowValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getShowValues();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataSwig_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getDescription();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1PropertyMetaDataSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PropertyMetaData **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ComponentMetaDataSwig_1getComponentIdAsInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ComponentMetaData **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getComponentIdAsInt();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT int JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ComponentMetaDataSwig_1getComponentId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  byte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ComponentMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getComponentId();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ComponentMetaDataSwig_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ComponentMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ComponentMetaDataSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ComponentMetaData **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ProfileMetaDataSwig_1getProfileId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProfileMetaData *arg1 = (ProfileMetaData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProfileMetaData **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getProfileId();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ProfileMetaDataSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProfileMetaData *arg1 = (ProfileMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProfileMetaData **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1ValueMetaDataKeySwig(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  ValueMetaDataKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (ValueMetaDataKey *)new ValueMetaDataKey(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ValueMetaDataKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataKeySwig_1getPropertyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValueMetaDataKey **)&jarg1; 
  {
    try {
      result = (arg1)->getPropertyName();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataKeySwig_1getValueName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValueMetaDataKey **)&jarg1; 
  {
    try {
      result = (arg1)->getValueName();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ValueMetaDataKeySwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValueMetaDataKey **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataSwig_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValueMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataSwig_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValueMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getDescription();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataSwig_1getUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValueMetaData **)&jarg1; 
  {
    try {
      result = (arg1)->getUrl();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ValueMetaDataSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValueMetaData **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ComponentMetaDataCollectionSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Collection< byte,ComponentMetaData > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ComponentMetaDataCollectionSwig_1getByKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  byte arg2 ;
  ComponentMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< byte,ComponentMetaData > **)&jarg1; 
  {
    arg2 = (byte)jarg2;
  }
  {
    try {
      result = (ComponentMetaData *)(arg1)->getByKey(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ComponentMetaData **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ComponentMetaDataCollectionSwig_1getByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  uint32_t arg2 ;
  ComponentMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< byte,ComponentMetaData > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ComponentMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ComponentMetaDataCollectionSwig_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< byte,ComponentMetaData > **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1PropertyMetaDataCollectionSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Collection< std::string,PropertyMetaData > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataCollectionSwig_1getByKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  std::string arg2 ;
  PropertyMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< std::string,PropertyMetaData > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (PropertyMetaData *)(arg1)->getByKey(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(PropertyMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataCollectionSwig_1getByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  uint32_t arg2 ;
  PropertyMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< std::string,PropertyMetaData > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (PropertyMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(PropertyMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_PropertyMetaDataCollectionSwig_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< std::string,PropertyMetaData > **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ProfileMetaDataCollectionSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Collection< uint32_t,ProfileMetaData > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ProfileMetaDataCollectionSwig_1getByKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t arg2 ;
  ProfileMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< uint32_t,ProfileMetaData > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ProfileMetaData *)(arg1)->getByKey(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ProfileMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ProfileMetaDataCollectionSwig_1getByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t arg2 ;
  ProfileMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< uint32_t,ProfileMetaData > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ProfileMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ProfileMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ProfileMetaDataCollectionSwig_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< uint32_t,ProfileMetaData > **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ValueMetaDataCollectionSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Collection< ValueMetaDataKey,ValueMetaData > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataCollectionSwig_1getByKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  SwigValueWrapper< ValueMetaDataKey > arg2 ;
  ValueMetaDataKey *argp2 ;
  ValueMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Collection< ValueMetaDataKey,ValueMetaData > **)&jarg1; 
  argp2 = *(ValueMetaDataKey **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ValueMetaDataKey");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (ValueMetaData *)(arg1)->getByKey(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ValueMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataCollectionSwig_1getByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  uint32_t arg2 ;
  ValueMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< ValueMetaDataKey,ValueMetaData > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (ValueMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ValueMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ValueMetaDataCollectionSwig_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Collection< ValueMetaDataKey,ValueMetaData > **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1MetaDataSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MetaData *arg1 = (MetaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MetaData **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< byte,ComponentMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetaData **)&jarg1; 
  {
    try {
      result = (Collection< byte,ComponentMetaData > *)(arg1)->getComponents();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< byte,ComponentMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< std::string,PropertyMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetaData **)&jarg1; 
  {
    try {
      result = (Collection< std::string,PropertyMetaData > *)(arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< std::string,PropertyMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< uint32_t,ProfileMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetaData **)&jarg1; 
  {
    try {
      result = (Collection< uint32_t,ProfileMetaData > *)(arg1)->getProfiles();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< uint32_t,ProfileMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetaData **)&jarg1; 
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValues();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< ValueMetaDataKey,ValueMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getValuesForProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(PropertyMetaData **)&jarg2; 
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValuesForProperty(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< ValueMetaDataKey,ValueMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getValuesForProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  ProfileMetaData *arg2 = (ProfileMetaData *) 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(ProfileMetaData **)&jarg2; 
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValuesForProfile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< ValueMetaDataKey,ValueMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getComponentForProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  ProfileMetaData *arg2 = (ProfileMetaData *) 0 ;
  ComponentMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(ProfileMetaData **)&jarg2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getComponentForProfile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ComponentMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getComponentForProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  ComponentMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(PropertyMetaData **)&jarg2; 
  {
    try {
      result = (ComponentMetaData *)(arg1)->getComponentForProperty(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ComponentMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getDefaultProfileForComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  ComponentMetaData *arg2 = (ComponentMetaData *) 0 ;
  ProfileMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(ComponentMetaData **)&jarg2; 
  {
    try {
      result = (ProfileMetaData *)(arg1)->getDefaultProfileForComponent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ProfileMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getDefaultValueForProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  ValueMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(PropertyMetaData **)&jarg2; 
  {
    try {
      result = (ValueMetaData *)(arg1)->getDefaultValueForProperty(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ValueMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getPropertiesForComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  ComponentMetaData *arg2 = (ComponentMetaData *) 0 ;
  Collection< std::string,PropertyMetaData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(ComponentMetaData **)&jarg2; 
  {
    try {
      result = (Collection< std::string,PropertyMetaData > *)(arg1)->getPropertiesForComponent(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Collection< std::string,PropertyMetaData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_MetaDataSwig_1getPropertyForValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MetaData *arg1 = (MetaData *) 0 ;
  ValueMetaData *arg2 = (ValueMetaData *) 0 ;
  PropertyMetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MetaData **)&jarg1; 
  arg2 = *(ValueMetaData **)&jarg2; 
  {
    try {
      result = (PropertyMetaData *)(arg1)->getPropertyForValue(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(PropertyMetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1EngineBaseSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1setLicenseKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setLicenseKey((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1setDataUpdateUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setDataUpdateUrl((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  MetaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (MetaData *)(arg1)->getMetaData();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(MetaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getAutomaticUpdatesEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getAutomaticUpdatesEnabled();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1processBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  EvidenceBase *arg2 = (EvidenceBase *) 0 ;
  ResultsBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EngineBase **)&jarg1; 
  arg2 = *(EvidenceBase **)&jarg2; 
  {
    try {
      result = (ResultsBase *)(arg1)->processBase(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ResultsBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1refreshData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      (arg1)->refreshData();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1refreshData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->refreshData((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1refreshData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  EngineBase *arg1 = (EngineBase *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    if (jarg2 != NULL) {
      // Get the number of bytes in the byte array.
      arg3 = jenv->GetArrayLength(jarg2);
      // Allocate memory for the destination byte array used internally by
      // the data set. This memory is required for the lifetime of the data
      // set.
      arg2 = (unsigned char*)malloc(arg3);
      if (arg2 == NULL) {
        SWIG_JavaThrowException(
          jenv,
          SWIG_JavaRuntimeException,
          "Failed to allocate memory to copy the input byte array.");
        return ;
      }
      // Attempt to get a pointer to the data within the jbyteArray.
      jbyte* data = jenv->GetByteArrayElements(jarg2, NULL);
      if (data == NULL) {
        SWIG_JavaThrowException(
          jenv,
          SWIG_JavaRuntimeException,
          "Failed to obtain pointer to the input byte array.");
        return ;
      }
      // Copy the input byte array to the destination and release the
      // reference to source pointer.
      memcpy(arg2, data, arg3);
      jenv->ReleaseByteArrayElements(jarg2, data, JNI_ABORT);
    }
    else {
      // Let the underlying C implementation throw the null pointer exception.
      arg2 = (unsigned char*)NULL;
      arg3 = 0;
    }
  }
  {
    try {
      (arg1)->refreshData(arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getDataUpdateUrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getDataUpdateUrl();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getPublishedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  Date result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getPublishedTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Date **)&jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getUpdateAvailableTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  Date result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getUpdateAvailableTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Date **)&jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getDataFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getDataFilePath();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getDataFileTempPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getDataFileTempPath();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getProduct();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (arg1)->getType();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (std::vector< std::string > *)(arg1)->getKeys();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineBaseSwig_1getIsThreadSafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EngineBase *arg1 = (EngineBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineBase **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getIsThreadSafe();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1UTF8StringSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1UTF8StringSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  {
    try {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< uint8_t > const *)arg1)->empty();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1UTF8StringSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(unsigned char const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_uint8_t_Sg__doCapacity(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        std_vector_Sl_uint8_t_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_uint8_t_Sg__doSize((std::vector< unsigned char > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(arg1,(unsigned char const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(unsigned char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jshort JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(unsigned char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_UTF8StringSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      try {
        std_vector_Sl_uint8_t_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1UTF8StringSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueStringSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WeightedValue< std::string > *arg1 = (WeightedValue< std::string > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::string > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueStringSwig_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WeightedValue< std::string > *arg1 = (WeightedValue< std::string > *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setValue(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueStringSwig_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WeightedValue< std::string > *arg1 = (WeightedValue< std::string > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::string > **)&jarg1; 
  {
    try {
      result = (float)(arg1)->getWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueStringSwig_1getRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WeightedValue< std::string > *arg1 = (WeightedValue< std::string > *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::string > **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getRawWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueStringSwig_1setRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WeightedValue< std::string > *arg1 = (WeightedValue< std::string > *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::string > **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setRawWeight(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedValueStringSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WeightedValue< std::string > *arg1 = (WeightedValue< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WeightedValue< std::string > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueUTF8StringSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  WeightedValue< std::vector< uint8_t > > *arg1 = (WeightedValue< std::vector< uint8_t > > *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::vector< uint8_t > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueUTF8StringSwig_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  WeightedValue< std::vector< uint8_t > > *arg1 = (WeightedValue< std::vector< uint8_t > > *) 0 ;
  std::vector< uint8_t > arg2 ;
  std::vector< uint8_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(WeightedValue< std::vector< uint8_t > > **)&jarg1; 
  argp2 = *(std::vector< uint8_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint8_t >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setValue(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueUTF8StringSwig_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WeightedValue< std::vector< uint8_t > > *arg1 = (WeightedValue< std::vector< uint8_t > > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::vector< uint8_t > > **)&jarg1; 
  {
    try {
      result = (float)(arg1)->getWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueUTF8StringSwig_1getRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WeightedValue< std::vector< uint8_t > > *arg1 = (WeightedValue< std::vector< uint8_t > > *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::vector< uint8_t > > **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getRawWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueUTF8StringSwig_1setRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WeightedValue< std::vector< uint8_t > > *arg1 = (WeightedValue< std::vector< uint8_t > > *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< std::vector< uint8_t > > **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setRawWeight(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedValueUTF8StringSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WeightedValue< std::vector< uint8_t > > *arg1 = (WeightedValue< std::vector< uint8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WeightedValue< std::vector< uint8_t > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueBoolSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  WeightedValue< bool > *arg1 = (WeightedValue< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< bool > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueBoolSwig_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  WeightedValue< bool > *arg1 = (WeightedValue< bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setValue(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueBoolSwig_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WeightedValue< bool > *arg1 = (WeightedValue< bool > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< bool > **)&jarg1; 
  {
    try {
      result = (float)(arg1)->getWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueBoolSwig_1getRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WeightedValue< bool > *arg1 = (WeightedValue< bool > *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< bool > **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getRawWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueBoolSwig_1setRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WeightedValue< bool > *arg1 = (WeightedValue< bool > *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< bool > **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setRawWeight(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedValueBoolSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WeightedValue< bool > *arg1 = (WeightedValue< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WeightedValue< bool > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueIntSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WeightedValue< int > *arg1 = (WeightedValue< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< int > **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueIntSwig_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WeightedValue< int > *arg1 = (WeightedValue< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setValue(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueIntSwig_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WeightedValue< int > *arg1 = (WeightedValue< int > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< int > **)&jarg1; 
  {
    try {
      result = (float)(arg1)->getWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueIntSwig_1getRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WeightedValue< int > *arg1 = (WeightedValue< int > *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< int > **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getRawWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueIntSwig_1setRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WeightedValue< int > *arg1 = (WeightedValue< int > *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< int > **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setRawWeight(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedValueIntSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WeightedValue< int > *arg1 = (WeightedValue< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WeightedValue< int > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueDoubleSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WeightedValue< double > *arg1 = (WeightedValue< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< double > **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueDoubleSwig_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WeightedValue< double > *arg1 = (WeightedValue< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setValue(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueDoubleSwig_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WeightedValue< double > *arg1 = (WeightedValue< double > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< double > **)&jarg1; 
  {
    try {
      result = (float)(arg1)->getWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueDoubleSwig_1getRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WeightedValue< double > *arg1 = (WeightedValue< double > *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< double > **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getRawWeight();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedValueDoubleSwig_1setRawWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WeightedValue< double > *arg1 = (WeightedValue< double > *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WeightedValue< double > **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setRawWeight(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedValueDoubleSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WeightedValue< double > *arg1 = (WeightedValue< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WeightedValue< double > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_FIFTYONE_1DEGREES_1IP_1TYPE_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  e_fiftyone_degrees_ip_type result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (e_fiftyone_degrees_ip_type)FIFTYONE_DEGREES_IP_TYPE_INVALID;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_FIFTYONE_1DEGREES_1IP_1TYPE_1IPV4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  e_fiftyone_degrees_ip_type result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (e_fiftyone_degrees_ip_type)FIFTYONE_DEGREES_IP_TYPE_IPV4;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_FIFTYONE_1DEGREES_1IP_1TYPE_1IPV6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  e_fiftyone_degrees_ip_type result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (e_fiftyone_degrees_ip_type)FIFTYONE_DEGREES_IP_TYPE_IPV6;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1IpAddressSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) (unsigned char *)0 ;
  fiftyoneDegreesIpType arg2 ;
  IpAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (fiftyoneDegreesIpType)jarg2; 
  {
    try {
      result = (IpAddress *)new IpAddress((unsigned char const (*))arg1,arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(IpAddress **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1IpAddressSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  IpAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (IpAddress *)new IpAddress((char const *)arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(IpAddress **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IpAddressSwig_1getCopyOfIpAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  IpAddress *arg1 = (IpAddress *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IpAddress **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      (arg1)->getCopyOfIpAddress(arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IpAddressSwig_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IpAddress *arg1 = (IpAddress *) 0 ;
  fiftyoneDegreesIpType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IpAddress **)&jarg1; 
  {
    try {
      result = (fiftyoneDegreesIpType)(arg1)->getType();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1IpAddressSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IpAddress *arg1 = (IpAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IpAddress **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedStringListSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< WeightedValue< std::string > > *)new std::vector< WeightedValue< std::string > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedStringListSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = 0 ;
  std::vector< WeightedValue< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::string > > const & is null");
    return 0;
  } 
  {
    try {
      result = (std::vector< WeightedValue< std::string > > *)new std::vector< WeightedValue< std::string > >((std::vector< WeightedValue< std::string > > const &)*arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< WeightedValue< std::string > > const *)arg1)->empty();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedStringListSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  WeightedValue< std::string > *arg2 = 0 ;
  std::vector< WeightedValue< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(WeightedValue< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WeightedValue< std::string > const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = (std::vector< WeightedValue< std::string > > *)new_std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(WeightedValue< std::string > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doCapacity(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doSize((std::vector< WeightedValue< std::string > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  std::vector< WeightedValue< std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = *(std::vector< WeightedValue< std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::string > >::value_type const & is null");
    return ;
  } 
  {
    try {
      std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doAdd__SWIG_0(arg1,(WeightedValue< std::string > const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::string > >::value_type const & is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< std::string > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::string > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > >::value_type **)&jresult = new std::vector< WeightedValue< std::string > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< WeightedValue< std::string > >::value_type *) &std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::string > >::value_type *arg3 = 0 ;
  std::vector< WeightedValue< std::string > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::string > >::value_type const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< std::string > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > >::value_type **)&jresult = new std::vector< WeightedValue< std::string > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_std_string_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedStringListSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< WeightedValue< std::string > > *arg1 = (std::vector< WeightedValue< std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< WeightedValue< std::string > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedUTF8StringListSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< WeightedValue< std::vector< uint8_t > > > *)new std::vector< WeightedValue< std::vector< uint8_t > > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedUTF8StringListSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::vector< uint8_t > > > const & is null");
    return 0;
  } 
  {
    try {
      result = (std::vector< WeightedValue< std::vector< uint8_t > > > *)new std::vector< WeightedValue< std::vector< uint8_t > > >((std::vector< WeightedValue< std::vector< uint8_t > > > const &)*arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< WeightedValue< std::vector< uint8_t > > > const *)arg1)->empty();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedUTF8StringListSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  WeightedValue< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(WeightedValue< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WeightedValue< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = (std::vector< WeightedValue< std::vector< uint8_t > > > *)new_std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(WeightedValue< std::vector< unsigned char > > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doCapacity(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doSize((std::vector< WeightedValue< std::vector< unsigned char > > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  std::vector< WeightedValue< std::vector< unsigned char > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = *(std::vector< WeightedValue< std::vector< unsigned char > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const & is null");
    return ;
  } 
  {
    try {
      std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doAdd__SWIG_0(arg1,(WeightedValue< std::vector< unsigned char > > const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::vector< unsigned char > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< std::vector< unsigned char > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const & is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< std::vector< unsigned char > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::vector< unsigned char > > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< unsigned char > > >::value_type **)&jresult = new std::vector< WeightedValue< std::vector< unsigned char > > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::vector< unsigned char > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< WeightedValue< std::vector< unsigned char > > >::value_type *) &std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< unsigned char > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< std::vector< unsigned char > > >::value_type *arg3 = 0 ;
  std::vector< WeightedValue< std::vector< unsigned char > > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< std::vector< unsigned char > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< std::vector< unsigned char > > >::value_type const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< std::vector< unsigned char > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< unsigned char > > >::value_type **)&jresult = new std::vector< WeightedValue< std::vector< unsigned char > > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_std_vector_Sl_uint8_t_Sg__Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedUTF8StringListSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< WeightedValue< std::vector< uint8_t > > > *arg1 = (std::vector< WeightedValue< std::vector< uint8_t > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedBoolListSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< bool > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< WeightedValue< bool > > *)new std::vector< WeightedValue< bool > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedBoolListSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = 0 ;
  std::vector< WeightedValue< bool > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< bool > > const & is null");
    return 0;
  } 
  {
    try {
      result = (std::vector< WeightedValue< bool > > *)new std::vector< WeightedValue< bool > >((std::vector< WeightedValue< bool > > const &)*arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< WeightedValue< bool > > const *)arg1)->empty();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedBoolListSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  WeightedValue< bool > *arg2 = 0 ;
  std::vector< WeightedValue< bool > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(WeightedValue< bool > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WeightedValue< bool > const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = (std::vector< WeightedValue< bool > > *)new_std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(WeightedValue< bool > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doCapacity(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doSize((std::vector< WeightedValue< bool > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  std::vector< WeightedValue< bool > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = *(std::vector< WeightedValue< bool > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< bool > >::value_type const & is null");
    return ;
  } 
  {
    try {
      std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doAdd__SWIG_0(arg1,(WeightedValue< bool > const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< bool > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< bool > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< bool > >::value_type const & is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< bool > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< bool > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > >::value_type **)&jresult = new std::vector< WeightedValue< bool > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< bool > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< WeightedValue< bool > >::value_type *) &std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< bool > >::value_type *arg3 = 0 ;
  std::vector< WeightedValue< bool > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< bool > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< bool > >::value_type const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< bool > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > >::value_type **)&jresult = new std::vector< WeightedValue< bool > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_bool_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedBoolListSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< WeightedValue< bool > > *arg1 = (std::vector< WeightedValue< bool > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< WeightedValue< bool > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedIntListSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< WeightedValue< int > > *)new std::vector< WeightedValue< int > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedIntListSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = 0 ;
  std::vector< WeightedValue< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< int > > const & is null");
    return 0;
  } 
  {
    try {
      result = (std::vector< WeightedValue< int > > *)new std::vector< WeightedValue< int > >((std::vector< WeightedValue< int > > const &)*arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< WeightedValue< int > > const *)arg1)->empty();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedIntListSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  WeightedValue< int > *arg2 = 0 ;
  std::vector< WeightedValue< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(WeightedValue< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WeightedValue< int > const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = (std::vector< WeightedValue< int > > *)new_std_vector_Sl_WeightedValue_Sl_int_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(WeightedValue< int > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doCapacity(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doSize((std::vector< WeightedValue< int > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  std::vector< WeightedValue< int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = *(std::vector< WeightedValue< int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< int > >::value_type const & is null");
    return ;
  } 
  {
    try {
      std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doAdd__SWIG_0(arg1,(WeightedValue< int > const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< int > >::value_type const & is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< int > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< int > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > >::value_type **)&jresult = new std::vector< WeightedValue< int > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< WeightedValue< int > >::value_type *) &std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< int > >::value_type *arg3 = 0 ;
  std::vector< WeightedValue< int > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< int > >::value_type const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< int > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > >::value_type **)&jresult = new std::vector< WeightedValue< int > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_int_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedIntListSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< WeightedValue< int > > *arg1 = (std::vector< WeightedValue< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< WeightedValue< int > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedDoubleListSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< WeightedValue< double > > *)new std::vector< WeightedValue< double > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedDoubleListSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = 0 ;
  std::vector< WeightedValue< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< double > > const & is null");
    return 0;
  } 
  {
    try {
      result = (std::vector< WeightedValue< double > > *)new std::vector< WeightedValue< double > >((std::vector< WeightedValue< double > > const &)*arg1);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< WeightedValue< double > > const *)arg1)->empty();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  {
    try {
      (arg1)->clear();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedDoubleListSwig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  WeightedValue< double > *arg2 = 0 ;
  std::vector< WeightedValue< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(WeightedValue< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WeightedValue< double > const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = (std::vector< WeightedValue< double > > *)new_std_vector_Sl_WeightedValue_Sl_double_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(WeightedValue< double > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doCapacity(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doSize((std::vector< WeightedValue< double > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  std::vector< WeightedValue< double > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = *(std::vector< WeightedValue< double > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< double > >::value_type const & is null");
    return ;
  } 
  {
    try {
      std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doAdd__SWIG_0(arg1,(WeightedValue< double > const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< double > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< double > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< double > >::value_type const & is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< double > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > >::value_type **)&jresult = new std::vector< WeightedValue< double > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< double > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        result = (std::vector< WeightedValue< double > >::value_type *) &std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint arg2 ;
  std::vector< WeightedValue< double > >::value_type *arg3 = 0 ;
  std::vector< WeightedValue< double > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< WeightedValue< double > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< WeightedValue< double > >::value_type const & is null");
    return 0;
  } 
  {
    try {
      try {
        result = std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(WeightedValue< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > >::value_type **)&jresult = new std::vector< WeightedValue< double > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListSwig_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      try {
        std_vector_Sl_WeightedValue_Sl_double_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      };
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedDoubleListSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< WeightedValue< double > > *arg1 = (std::vector< WeightedValue< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< WeightedValue< double > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedStringListValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< std::string > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::vector< WeightedValue< std::string > > > *)new Value< std::vector< WeightedValue< std::string > > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::string > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::vector< WeightedValue< std::string > > > *arg1 = (Value< std::vector< WeightedValue< std::string > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< std::string > > > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::vector< WeightedValue< std::string > > > *arg1 = (Value< std::vector< WeightedValue< std::string > > > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< std::string > > > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedStringListValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< std::string > > > *arg1 = (Value< std::vector< WeightedValue< std::string > > > *) 0 ;
  std::vector< WeightedValue< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< std::string > > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::string > > **)&jresult = new std::vector< WeightedValue< std::string > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedStringListValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::vector< WeightedValue< std::string > > > *arg1 = (Value< std::vector< WeightedValue< std::string > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::vector< WeightedValue< std::string > > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedUTF8StringListValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *)new Value< std::vector< WeightedValue< std::vector< uint8_t > > > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *arg1 = (Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *arg1 = (Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedUTF8StringListValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *arg1 = (Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *) 0 ;
  std::vector< WeightedValue< std::vector< uint8_t > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< std::vector< uint8_t > > > **)&jresult = new std::vector< WeightedValue< std::vector< uint8_t > > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedUTF8StringListValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *arg1 = (Value< std::vector< WeightedValue< std::vector< uint8_t > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedBoolListValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< bool > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::vector< WeightedValue< bool > > > *)new Value< std::vector< WeightedValue< bool > > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< bool > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::vector< WeightedValue< bool > > > *arg1 = (Value< std::vector< WeightedValue< bool > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< bool > > > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::vector< WeightedValue< bool > > > *arg1 = (Value< std::vector< WeightedValue< bool > > > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< bool > > > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedBoolListValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< bool > > > *arg1 = (Value< std::vector< WeightedValue< bool > > > *) 0 ;
  std::vector< WeightedValue< bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< bool > > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< bool > > **)&jresult = new std::vector< WeightedValue< bool > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedBoolListValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::vector< WeightedValue< bool > > > *arg1 = (Value< std::vector< WeightedValue< bool > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::vector< WeightedValue< bool > > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedIntListValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< int > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::vector< WeightedValue< int > > > *)new Value< std::vector< WeightedValue< int > > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< int > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::vector< WeightedValue< int > > > *arg1 = (Value< std::vector< WeightedValue< int > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< int > > > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::vector< WeightedValue< int > > > *arg1 = (Value< std::vector< WeightedValue< int > > > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< int > > > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedIntListValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< int > > > *arg1 = (Value< std::vector< WeightedValue< int > > > *) 0 ;
  std::vector< WeightedValue< int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< int > > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< int > > **)&jresult = new std::vector< WeightedValue< int > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedIntListValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::vector< WeightedValue< int > > > *arg1 = (Value< std::vector< WeightedValue< int > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::vector< WeightedValue< int > > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1WeightedDoubleListValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< double > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< std::vector< WeightedValue< double > > > *)new Value< std::vector< WeightedValue< double > > >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< double > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< std::vector< WeightedValue< double > > > *arg1 = (Value< std::vector< WeightedValue< double > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< double > > > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< std::vector< WeightedValue< double > > > *arg1 = (Value< std::vector< WeightedValue< double > > > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< double > > > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_WeightedDoubleListValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< std::vector< WeightedValue< double > > > *arg1 = (Value< std::vector< WeightedValue< double > > > *) 0 ;
  std::vector< WeightedValue< double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< std::vector< WeightedValue< double > > > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< WeightedValue< double > > **)&jresult = new std::vector< WeightedValue< double > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1WeightedDoubleListValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< std::vector< WeightedValue< double > > > *arg1 = (Value< std::vector< WeightedValue< double > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< std::vector< WeightedValue< double > > > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1IpAddressValueSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Value< IpAddress > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Value< IpAddress > *)new Value< IpAddress >();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< IpAddress > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IpAddressValueSwig_1hasValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Value< IpAddress > *arg1 = (Value< IpAddress > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< IpAddress > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IpAddressValueSwig_1getNoValueMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Value< IpAddress > *arg1 = (Value< IpAddress > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< IpAddress > **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_IpAddressValueSwig_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Value< IpAddress > *arg1 = (Value< IpAddress > *) 0 ;
  SwigValueWrapper< IpAddress > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Value< IpAddress > **)&jarg1; 
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(IpAddress **)&jresult = new IpAddress(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1IpAddressValueSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Value< IpAddress > *arg1 = (Value< IpAddress > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value< IpAddress > **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ResultsIpiSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResultsIpi **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedStringList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< WeightedValue< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValuesAsWeightedStringList((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::string > > > **)&jresult = new Value< std::vector< WeightedValue< std::string > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedStringList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  Value< std::vector< WeightedValue< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValuesAsWeightedStringList(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::string > > > **)&jresult = new Value< std::vector< WeightedValue< std::string > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedUTF8StringList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValuesAsWeightedUTF8StringList((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jresult = new Value< std::vector< WeightedValue< std::vector< uint8_t > > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedUTF8StringList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  Value< std::vector< WeightedValue< std::vector< uint8_t > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValuesAsWeightedUTF8StringList(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::vector< uint8_t > > > > **)&jresult = new Value< std::vector< WeightedValue< std::vector< uint8_t > > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedWKTStringList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t arg3 ;
  Value< std::vector< WeightedValue< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint8_t)jarg3; 
  {
    try {
      result = (arg1)->getValuesAsWeightedWKTStringList((std::string const &)*arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::string > > > **)&jresult = new Value< std::vector< WeightedValue< std::string > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedWKTStringList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  Value< std::vector< WeightedValue< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8_t)jarg3; 
  {
    try {
      result = (arg1)->getValuesAsWeightedWKTStringList(arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< std::string > > > **)&jresult = new Value< std::vector< WeightedValue< std::string > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedBoolList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< WeightedValue< bool > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValuesAsWeightedBoolList((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< bool > > > **)&jresult = new Value< std::vector< WeightedValue< bool > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedBoolList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  Value< std::vector< WeightedValue< bool > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValuesAsWeightedBoolList(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< bool > > > **)&jresult = new Value< std::vector< WeightedValue< bool > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedIntegerList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< WeightedValue< int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValuesAsWeightedIntegerList((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< int > > > **)&jresult = new Value< std::vector< WeightedValue< int > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedIntegerList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  Value< std::vector< WeightedValue< int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValuesAsWeightedIntegerList(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< int > > > **)&jresult = new Value< std::vector< WeightedValue< int > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedDoubleList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  Value< std::vector< WeightedValue< double > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValuesAsWeightedDoubleList((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< double > > > **)&jresult = new Value< std::vector< WeightedValue< double > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValuesAsWeightedDoubleList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  Value< std::vector< WeightedValue< double > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValuesAsWeightedDoubleList(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< WeightedValue< double > > > **)&jresult = new Value< std::vector< WeightedValue< double > > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValueAsIpAddress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  std::string *arg2 = 0 ;
  Value< IpAddress > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getValueAsIpAddress((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< IpAddress > **)&jresult = new Value< IpAddress >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1getValueAsIpAddress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ResultsIpi *arg1 = (ResultsIpi *) 0 ;
  int arg2 ;
  Value< IpAddress > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsIpi **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getValueAsIpAddress(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< IpAddress > **)&jresult = new Value< IpAddress >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ConfigBaseSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConfigBase **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1setUseUpperPrefixHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUseUpperPrefixHeaders(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1setUseTempFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUseTempFile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1setReuseTempFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReuseTempFile(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1setTempDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigBase **)&jarg1; 
  argp2 = *(std::vector< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setTempDirectories(SWIG_STD_MOVE(arg2));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1getUseUpperPrefixHeaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getUseUpperPrefixHeaders();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1getUseTempFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getUseTempFile();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1getReuseTempFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getReuseTempFile();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1getTempDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  {
    try {
      result = (arg1)->getTempDirectories();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigBaseSwig_1getConcurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigBase **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1CollectionConfigSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CollectionConfig *)new CollectionConfig();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_CollectionConfigSwig_1setCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollectionConfig **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->setCapacity(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_CollectionConfigSwig_1setConcurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollectionConfig **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setConcurrency(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_CollectionConfigSwig_1setLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollectionConfig **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->setLoaded(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_CollectionConfigSwig_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollectionConfig **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getCapacity();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_CollectionConfigSwig_1getConcurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollectionConfig **)&jarg1; 
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_CollectionConfigSwig_1getLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollectionConfig **)&jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getLoaded();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1CollectionConfigSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CollectionConfig **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1ConfigIpiSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConfigIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ConfigIpi *)new ConfigIpi();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ConfigIpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1setHighPerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      (arg1)->setHighPerformance();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1setBalanced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      (arg1)->setBalanced();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1setBalancedTemp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      (arg1)->setBalancedTemp();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1setLowMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      (arg1)->setLowMemory();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1setMaxPerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      (arg1)->setMaxPerformance();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1setConcurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      (arg1)->setConcurrency(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getStrings();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getComponents();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getMaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getMaps();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getProperties();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getValues();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getProfiles();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getGraphs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getGraphs();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getProfileGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getProfileGroups();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getProfileOffsets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getProfileOffsets();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getPropertyTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getPropertyTypes();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getGraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  CollectionConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (CollectionConfig *) &((ConfigIpi const *)arg1)->getGraph();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(CollectionConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1getConcurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      result = (uint16_t)((ConfigIpi const *)arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1ConfigIpiSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConfigIpi *arg1 = (ConfigIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConfigIpi **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1EvidenceBaseSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EvidenceBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (EvidenceBase *)new EvidenceBase();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(EvidenceBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1EvidenceBaseSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EvidenceBase *arg1 = (EvidenceBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EvidenceBase **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1EvidenceIpiSwig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EvidenceIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (EvidenceIpi *)new EvidenceIpi();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(EvidenceIpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1EvidenceIpiSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EvidenceIpi *arg1 = (EvidenceIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EvidenceIpi **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1EngineIpiSwig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ConfigIpi *arg2 = (ConfigIpi *) 0 ;
  RequiredPropertiesConfig *arg3 = (RequiredPropertiesConfig *) 0 ;
  EngineIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(ConfigIpi **)&jarg2; 
  arg3 = *(RequiredPropertiesConfig **)&jarg3; 
  {
    try {
      result = (EngineIpi *)new EngineIpi((std::string const &)*arg1,arg2,arg3);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(EngineIpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_new_1EngineIpiSwig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) (unsigned char *)0 ;
  long arg2 ;
  ConfigIpi *arg3 = (ConfigIpi *) 0 ;
  RequiredPropertiesConfig *arg4 = (RequiredPropertiesConfig *) 0 ;
  EngineIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  {
    if (jarg1 != NULL) {
      // Get the number of bytes in the byte array.
      arg2 = jenv->GetArrayLength(jarg1);
      // Allocate memory for the destination byte array used internally by
      // the data set. This memory is required for the lifetime of the data
      // set.
      arg1 = (unsigned char*)malloc(arg2);
      if (arg1 == NULL) {
        SWIG_JavaThrowException(
          jenv,
          SWIG_JavaRuntimeException,
          "Failed to allocate memory to copy the input byte array.");
        return 0;
      }
      // Attempt to get a pointer to the data within the jbyteArray.
      jbyte* data = jenv->GetByteArrayElements(jarg1, NULL);
      if (data == NULL) {
        SWIG_JavaThrowException(
          jenv,
          SWIG_JavaRuntimeException,
          "Failed to obtain pointer to the input byte array.");
        return 0;
      }
      // Copy the input byte array to the destination and release the
      // reference to source pointer.
      memcpy(arg1, data, arg2);
      jenv->ReleaseByteArrayElements(jarg1, data, JNI_ABORT);
    }
    else {
      // Let the underlying C implementation throw the null pointer exception.
      arg1 = (unsigned char*)NULL;
      arg2 = 0;
    }
  }
  arg3 = *(ConfigIpi **)&jarg3; 
  arg4 = *(RequiredPropertiesConfig **)&jarg4; 
  {
    try {
      result = (EngineIpi *)new EngineIpi(arg1,arg2,arg3,arg4);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(EngineIpi **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1getPublishedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  Date result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  {
    try {
      result = (arg1)->getPublishedTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Date **)&jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1getUpdateAvailableTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  Date result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  {
    try {
      result = (arg1)->getUpdateAvailableTime();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Date **)&jresult = new Date(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1getDataFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  {
    try {
      result = (arg1)->getDataFilePath();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1getDataFileTempPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  {
    try {
      result = (arg1)->getDataFileTempPath();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1refreshData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  {
    try {
      (arg1)->refreshData();;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1refreshData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->refreshData((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1process_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  EvidenceIpi *arg2 = (EvidenceIpi *) 0 ;
  ResultsIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EngineIpi **)&jarg1; 
  arg2 = *(EvidenceIpi **)&jarg2; 
  {
    try {
      result = (ResultsIpi *)(arg1)->process(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ResultsIpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1process_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  char *arg2 = (char *) 0 ;
  ResultsIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (ResultsIpi *)(arg1)->process((char const *)arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ResultsIpi **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1process_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  long arg3 ;
  fiftyoneDegreesIpType arg4 ;
  ResultsIpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EngineIpi **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (fiftyoneDegreesIpType)jarg4; 
  {
    try {
      result = (ResultsIpi *)(arg1)->process(arg2,arg3,arg4);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ResultsIpi **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1processBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  EvidenceBase *arg2 = (EvidenceBase *) 0 ;
  ResultsBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EngineIpi **)&jarg1; 
  arg2 = *(EvidenceBase **)&jarg2; 
  {
    try {
      result = (ResultsBase *)(arg1)->processBase(arg2);;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(ResultsBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_delete_1EngineIpiSwig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EngineIpi *arg1 = (EngineIpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EngineIpi **)&jarg1; 
  {
    try {
      delete arg1;;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Evidence_1AddFromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg4) {
  EvidenceBase *arg1 = (EvidenceBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  char *arg4 = (char *) (char *)0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EvidenceBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    if (jarg4) {
      arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  {
    try {
      Evidence_AddFromBytes(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3),(char const (*))arg4,SWIG_STD_MOVE(arg5));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, 0);
  }
  
  
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Results_1GetValueAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  Value< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = Results_GetValueAsString(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::string > **)&jresult = new Value< std::string >(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Results_1GetValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  Value< std::vector< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = Results_GetValues(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< std::vector< std::string > > **)&jresult = new Value< std::vector< std::string > >(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Results_1GetValueAsBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  Value< bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = Results_GetValueAsBool(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< bool > **)&jresult = new Value< bool >(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Results_1GetValueAsInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  Value< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = Results_GetValueAsInteger(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< int > **)&jresult = new Value< int >(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Results_1GetValueAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  Value< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = Results_GetValueAsDouble(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  *(Value< double > **)&jresult = new Value< double >(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_Results_1ContainsProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jboolean jresult = 0 ;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResultsBase **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = (bool)Results_ContainsProperty(arg1,(char const (*))arg2,SWIG_STD_MOVE(arg3));;
    }
    catch(FatalException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NotImplementedException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(InvalidPropertyException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(EvidenceException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(TooManyValuesException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(NoValuesAvailableException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }	
    catch(StatusCodeException& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(runtime_error& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
    catch(invalid_argument& e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ResultsIpiSwig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ResultsBase **)&baseptr = *(ResultsIpi **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_ConfigIpiSwig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ConfigBase **)&baseptr = *(ConfigIpi **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EvidenceBaseSwig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::map< std::string,std::string > **)&baseptr = *(EvidenceBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EvidenceIpiSwig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(EvidenceBase **)&baseptr = *(EvidenceIpi **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_fiftyone_ipintelligence_hash_engine_onpremise_interop_swig_IpIntelligenceEngineModuleJNI_EngineIpiSwig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(EngineBase **)&baseptr = *(EngineIpi **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

